# 개요 (Overview)

* **게임명(가칭)**: School Survival: Day Zero (MVP)
* **장르**: 2D 픽셀탑다운 서바이벌 + 웨이브 디펜스
* **플랫폼**: PC (Windows; 후속으로 Mac)
* **엔진/언어**: Godot 4 또는 Unity 2022 LTS, C# (OOP 컴포지션), NUnit 기반 TDD
* **MVP 목표**: 핵심 루프(탐색→수집→제작→밤 방어) 검증, 플레이테스트 자료 수집, 기본 밸런스 확보
* **범위**: 고정 맵(교실 6칸 + 복도 + 급식실 + 창고), 플레이어 1인, 좀비 단일·단계적 웨이브, 인벤토리 3슬롯(확장 가능)

# 디자인 원칙 (Design Pillars)

1. **직관성**: 첫 2분 내 무엇 해야 하는지 보임(허기/아이템/방어).
2. **학습적 사망**: 죽음은 학습의 일부지만 반복이 과도하지 않음(마인크래프트 난이도 감각).
3. **작고 빈틈없는 루프**: 하루(세션)는 짧게 → 반복 플레이로 밸런스 수치 보정.
4. **TDD 우선**: 핵심 시스템(허기, 웨이브, 인벤토리)은 테스트로 보호.

# 핵심 플레이 루프 (Core Loop)

1. **낮(교시)** — 플레이어가 장소 선택(교실/급식실/창고/운동장) → 상호작용(E)으로 루팅·자원 획득 → 제작(책상파편→방벽)
2. **저녁(준비)** — 제작한 방벽 배치, 최종 정비
3. **밤(웨이브)** — 웨이브(최대 3) 진행, 좀비가 출입구·복도 통해 유입. 플레이어가 직접 방어
4. **결과/다음날** — 생존 여부에 따라 간단 컷/상태 갱신(아이템 소모·허기 보정)

# 상세 기능 정의 (Features & Acceptance)

## 플레이어

* **속성**: HP(100), Hunger(0\~100, 초기 100), 이동속도 기본 100%
* **행동**: 이동, 근접공격(야구방망이), 상호작용(E), 아이템 사용
* **인벤토리**: 3슬롯(스택 가능), UI에서 직접 사용/버림
* **Acceptance**: WASD 이동, 충돌 처리, E로 상호작용, 인벤토리에 아이템 추가/사용 확인

## 허기 시스템

* **MaxHunger** = 100
* **기본감소**: 0.05 / sec (게임 기본 틱)
* **행동소모**: 달리기 +0.12/sec, 공격 1.5/회, 제작 작업 5/작업
* **음식 회복값**: 삼각김밥 +25, 우유 +12, 통조림 +40(희귀)
* **임계효과**: Hunger ≥ 50: 정상 / 20–49: 피로(이동 85%) / <20: 기아(이동 70%, 공격 쿨다운+20%) / ==0: HP -0.5/sec
* **Acceptance**: 허기 감소·회복이 UI 바와 일치, 임계치별 페널티 적용

## 자원·루팅

* **오브젝트**: 책상(loot table), 사물함, 급식대, 창고(고정 드랍 확률)
* **드랍표(예)**: 책상: 50% 쓰레기, 30% 책상파편, 20% 음식(작은)
* **Acceptance**: 상호작용 시 드랍 확률대로 인벤토리에 추가 & 아이템 카운트 반영

## 제작(Crafting)

* **레시피**: 책상파편 x3 → 임시방벽 (HP 120, 내구도 있음)
* **작업시간**: 4초(진행바), 작업 중 허기 추가 소모
* **Acceptance**: 제작 완료 시 방벽 프리팹 생성, HP 값과 내구도 정상 적용

## 밤 웨이브(Spawner/WaveManager)

* **NightWave1**: 5 좀비, spawnInterval 1.2s
* **NightWave2**: 8 좀비, spawnInterval 1.0s
* **NightWave3**: 12 좀비, spawnInterval 0.8s
* 스폰 포인트: 각 교실 출입구(맵에 6포인트), 복도 2포인트
* **Acceptance**: 웨이브 규칙대로 스폰, 모든 웨이브 소멸 시 다음 단계/게임 오버 조건 체크

## 좀비 AI

* **행동**: 단순 추적(플레이어/방어구 파괴 목표 우선), 충돌/공격 판정
* **수치**: HP 50, 데미지 12, 공격쿨 1.2s, 속도 낮 1.0 / 밤 1.35
* **Acceptance**: 탐지 범위 내 추적, 방벽 충돌하면 공격/파괴

# 데이터 설계 (예시 JSON)

```json
// items.json (샘플)
{
  "items": [
    {"id":"sandwich","name":"삼각김밥","type":"food","hunger":25,"stack":3},
    {"id":"milk","name":"우유","type":"food","hunger":12,"stack":1},
    {"id":"desk_shard","name":"책상파편","type":"material","stack":10}
  ]
}
```

```json
// waves.json
{
  "waves":[
    {"day":1,"wave":1,"count":5,"interval":1.2},
    {"day":1,"wave":2,"count":8,"interval":1.0},
    {"day":1,"wave":3,"count":12,"interval":0.8}
  ]
}
```

# UI/UX (MVP)

* HUD: 좌상단 HP / Hunger 바, 하단 중앙 인벤토리(3슬롯), 우상단 시간/웨이브 카운터
* 피드백: 허기 임계치 진입 시 바 색 변화 + 진동/사운드 알림
* 상호작용: E 아이콘이 오브젝트 위에 표시, 제작 프로그레스 바 표시

# 아트·사운드 스펙 (MVP)

* **타일**: 교실/복도/급식실/창고 타일셋 (32×32 픽셀, 16컬러 팔레트 권장)
* **스프라이트**: 플레이어(걷기4, 공격3, idle2) 32×32, 좀비 동일 규격
* **FX**: 간단 파티클(물자 획득, 피격)
* **사운드**: BGM 2곡(낮/밤), SFX 20개(상호작용, 공격, 피격, 경고음 등)

# 기술 아키텍처 (모듈 & 책임)

* **Core**: GameManager, TimeManager, SaveManager
* **Gameplay**: PlayerController, HungerSystem, InventoryManager, CraftingManager, WaveManager, Spawner, ZombieAI
* **UI**: UIManager, HUDController, InventoryUI
* **Data**: JSON loader, ScriptableObjects(엔진 선택 시), ResourceManager
* **Tests**: HungerTests, WaveManagerTests, InventoryTests (NUnit)

(간단 ASCII 클래스 맵 제공 가능; 원하면 PlantUML로 시각화)

# TDD / 테스트 항목 (우선순위)

1. HungerSystem 단위테스트: 시간 경과→감소량, 음식 사용→회복량, 임계치 페널티 적용
2. WaveManager 테스트: Configure + Update → 정확한 수량 스폰, 웨이브 종료 조건
3. Inventory 테스트: Add/Remove/Stack, Use → 인벤토리 변경 및 효과 적용
4. Spawn/Cleanup 테스트: 죽은 엔티티가 제대로 정리되는지

# QA·플레이테스트 계획

* 내부 플레이테스트: 20 세션(각 10\~20분), 핵심 메트릭 수집(평균 생존시간, 허기 소모속도, 아이템 획득 빈도)
* 피드백 루프: 매주 1회 밸런스 조정 회의(데이터 기반)

# 8주 스프린트(상세 PBIs & Acceptance) — 핵심만 발췌

* **Week0 (세팅)**: repo, CI, 프로젝트 템플릿, 기본 타일맵 로드

  * Acceptance: GitHub Actions 빌드/테스트 통과
* **Week1**: Player 이동/충돌/기본 HUD

  * Acceptance: 이동/공격 애니메이션 연결, HUD Hunger/HP 업데이트
* **Week2**: HungerSystem(TDD), 인벤토리(3슬롯)

  * Acceptance: Hunger 테스트 통과, 인벤토리 아이템 사용 확인
* **Week3**: 루팅(책상/사물함), 아이템 드랍 테이블

  * Acceptance: 오브젝트 상호작용으로 아이템 스폰·인벤토리에 반영
* **Week4**: 제작(책상파편→방벽), 배치 시스템

  * Acceptance: 방벽 생성·HP 동작 확인
* **Week5**: ZombieAI, Spawner 기본, WaveManager 초기

  * Acceptance: 웨이브 스폰 규칙 확인, 좀비 추적 동작
* **Week6**: 밤 연출·사운드·밸런스 조정

  * Acceptance: 밤/낮 전환, 웨이브 UI/사운드 정상 동작
* **Week7**: 버그픽스·내부플레이테스트(20세션)

  * Acceptance: 수집된 데이터로 허기/아이템 밸런스 조정
* **Week8**: MVP 폴리시 & 릴리즈 빌드

  * Acceptance: 실행 빌드 제공 + 최소 플레이 테스트 리포트

# 메트릭(데이터) — 성공 지표

* 평균 생존시간(목표 초회 플레이어 3\~10분)
* 허기 회복 아이템 등장 빈도: 1일당 평균 2\~3개
* 플레이어 사망 원인비율(목표): 허기 40% / 전투 60%
* 버그 임계치: 치명적 크래시 0, 주요버그 ≤ 5

# 리스크 & 완화

* 허기 밸런스 실패 → 초기 내부 플레이세션으로 값 조정(주간)
* 아트 지연 → 프로토타입용 임시 블록아트로 우선 개발
* 성능 문제(대량 스폰) → 오브젝트 풀링, 스폰 동시수 제한

# 산출물(릴리스)

* Windows 실행 파일(테스터용)
* 소스코드(분리된 Core & Game 레이어), Tests
* 아트 패키지(타일/스프라이트)
* 플레이테스트 리포트(데이터+정성평가)