{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "학교 맵 레벨 디자인 구현",
        "description": "고정 맵(교실 6칸 + 복도 + 급식실 + 창고) 씬을 생성하고 상호작용 가능한 오브젝트들을 배치",
        "details": "새로운 SchoolMap.tscn을 생성하여 교실 6칸, 복도, 급식실, 창고, 운동장을 타일맵으로 구성. 각 방마다 상호작용 가능한 오브젝트(책상, 사물함, 급식대, 창고 상자)를 Area2D로 배치하고 E키 상호작용 힌트 UI 시스템 구현. 32x32 픽셀 타일셋 사용하여 학교 분위기 연출.",
        "testStrategy": "씬 로드 테스트, 각 방 접근 가능 여부 확인, 상호작용 오브젝트 감지 범위 테스트, E키 힌트 UI 표시/숨김 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "기본 SchoolMap.tscn 씬 생성 및 구조 설정",
            "description": "새로운 SchoolMap 씬을 생성하고 기본 노드 구조와 카메라 설정을 구성",
            "dependencies": [],
            "details": "Game.tscn을 참고하여 새로운 SchoolMap.tscn 생성. 루트 노드(Node2D), 카메라, 플레이어 노드 배치. 씬 기본 설정과 노드 구조 확립.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "32x32 타일셋을 사용한 학교 맵 레이아웃 구성",
            "description": "TileMap을 사용하여 교실 6칸, 복도, 급식실, 창고, 운동장을 타일로 구성",
            "dependencies": [
              "1.1"
            ],
            "details": "32x32 픽셀 타일셋 리소스 추가. TileMap 노드 생성하여 학교 건물 레이아웃 구성. 벽, 바닥, 문 타일로 각 방 경계 설정. 충돌 레이어 설정으로 플레이어 이동 경로 제한.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "상호작용 가능한 오브젝트 Area2D 배치",
            "description": "각 방에 책상, 사물함, 급식대, 창고 상자 등 상호작용 오브젝트를 Area2D로 배치",
            "dependencies": [
              "1.2"
            ],
            "details": "교실마다 책상과 사물함 Area2D 배치. 급식실에 급식대, 창고에 창고 상자 배치. 각 Area2D에 적절한 Sprite2D와 CollisionShape2D 설정. 상호작용 타입별 그룹 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "E키 상호작용 힌트 UI 시스템 구현",
            "description": "플레이어가 상호작용 오브젝트에 접근하면 E키 힌트를 표시하는 UI 시스템 구현",
            "dependencies": [
              "1.3"
            ],
            "details": "InteractionHint.cs 스크립트로 E키 아이콘 UI 구현. 플레이어 Area2D 감지 시 힌트 표시, 벗어나면 숨김. 오브젝트 위치 기준으로 UI 위치 조정. 깔끔한 힌트 디자인과 애니메이션 효과.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "맵 통합 테스트 및 씬 전환 연결",
            "description": "SchoolMap 씬의 모든 기능을 테스트하고 게임의 메인 씬과 연결",
            "dependencies": [
              "1.4"
            ],
            "details": "모든 상호작용 오브젝트 정상 작동 확인. 플레이어 이동과 충돌 테스트. E키 힌트 UI 표시/숨김 테스트. SceneManager를 통한 Game.tscn과의 씬 전환 구현. 최종 통합 테스트 수행.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "인벤토리 시스템 개발",
        "description": "3슬롯 인벤토리 시스템을 구현하고 UI에서 아이템 사용/버림 기능 제공",
        "details": "InventoryComponent.cs와 InventoryUI.cs를 생성하여 3슬롯 제한된 인벤토리 구현. 아이템 스택 기능, 드래그&드롭, 우클릭 사용/버림 기능 포함. HUD에 인벤토리 UI를 통합하고 아이템별 아이콘과 수량 표시. JSON 기반 아이템 데이터 로딩 시스템 구축.",
        "testStrategy": "인벤토리 추가/제거 테스트, 스택 기능 테스트, UI 상호작용 테스트, 저장/로드 테스트, 용량 초과 시 처리 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "아이템 및 루팅 시스템 구현",
        "description": "다양한 아이템 타입과 루팅 테이블을 구현하여 오브젝트 상호작용 시 아이템 드랍",
        "details": "Item.cs 베이스 클래스와 Food, Material 파생 클래스 생성. items.json에서 아이템 데이터 로딩하는 ItemDatabase 구현. LootTable 시스템으로 책상(50% 쓰레기, 30% 책상파편, 20% 음식), 사물함, 급식대별 드랍 확률 설정. 상호작용 시 확률 기반 아이템 생성하여 인벤토리에 추가.",
        "testStrategy": "아이템 생성 테스트, 루팅 확률 테스트, 드랍 아이템 인벤토리 추가 테스트, JSON 데이터 로딩 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "제작(Crafting) 시스템 개발",
        "description": "책상파편을 이용한 임시방벽 제작 시스템과 제작 UI 구현",
        "details": "CraftingSystem.cs와 CraftingUI.cs 구현하여 책상파편 x3 → 임시방벽(HP 120) 레시피 처리. 4초 제작 진행바 UI와 제작 중 허기 추가 소모(5/작업) 로직. 완성된 방벽을 배치 모드로 전환하여 플레이어가 원하는 위치에 설치 가능. Barricade.cs 프리팹으로 내구도 시스템 포함.",
        "testStrategy": "레시피 검증 테스트, 제작 시간 및 허기 소모 테스트, 방벽 생성 및 배치 테스트, 방벽 HP 및 내구도 테스트",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "강화된 허기 시스템 구현",
        "description": "PRD 명세에 맞춰 허기 시스템을 확장하고 행동별 소모량과 임계 효과를 구현",
        "details": "기존 HungerComponent를 확장하여 PRD 명세 적용: 기본감소 0.05/sec, 달리기 +0.12/sec, 공격 1.5/회, 제작 5/작업. 임계치별 페널티 구현(≥50 정상, 20-49 피로 85% 속도, <20 기아 70% 속도+공격쿨다운+20%, =0 HP -0.5/sec). 음식별 회복량 차별화(삼각김밥 25, 우유 12, 통조림 40).",
        "testStrategy": "허기 감소율 테스트, 행동별 추가 소모 테스트, 임계치별 페널티 적용 테스트, 음식 회복량 테스트, 굶주림 체력 감소 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "시간 관리 시스템(낮/저녁/밤) 구현",
        "description": "게임의 핵심 루프인 낮(탐색) → 저녁(준비) → 밤(웨이브) 시간 시스템 구현",
        "details": "TimeManager.cs로 시간 단계별 전환 관리. 낮 시간에는 장소 이동과 루팅 활성화, 저녁에는 방벽 배치 모드 전환, 밤에는 웨이브 시작. UI에 현재 시간대와 남은 시간 표시. 각 단계별 BGM 전환과 화면 색조 변화로 분위기 연출. 시간별 플레이어 행동 제약 시스템.",
        "testStrategy": "시간 전환 로직 테스트, 각 단계별 행동 제약 테스트, UI 시간 표시 테스트, BGM 전환 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "개선된 웨이브 시스템 적용",
        "description": "PRD 명세에 따른 3웨이브 시스템으로 기존 웨이브 매니저 수정",
        "details": "기존 WaveManager를 수정하여 밤 3웨이브로 제한: Wave1(5좀비, 1.2s 간격), Wave2(8좀비, 1.0s 간격), Wave3(12좀비, 0.8s 간격). 학교 맵의 각 교실 출입구(6포인트)와 복도(2포인트)에서 스폰. waves.json 데이터 구조 변경하여 일수별 웨이브 설정 지원.",
        "testStrategy": "웨이브 스폰 수량 및 간격 테스트, 스폰 포인트 검증 테스트, JSON 웨이브 데이터 로딩 테스트, 모든 웨이브 클리어 시 다음날 전환 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "확장된 좀비 AI 및 방벽 공격 시스템",
        "description": "좀비가 방벽을 우선 공격하고 파괴하는 향상된 AI 시스템 구현",
        "details": "기존 ZombieAI를 확장하여 타겟 우선순위 시스템 구현: 방벽 → 플레이어 순서로 공격 대상 선택. 방벽 감지 범위와 공격 로직 추가하여 방벽 파괴 시 다음 타겟으로 전환. 좀비 수치 PRD 명세 적용: HP 50, 데미지 12, 공격쿨 1.2s, 낮 속도 1.0 → 밤 속도 1.35로 조정.",
        "testStrategy": "방벽 우선 공격 테스트, 방벽 파괴 후 플레이어 타겟 전환 테스트, 좀비 수치 검증 테스트, 속도 변화 테스트",
        "priority": "medium",
        "dependencies": [
          4,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "게임 상태 관리 및 세이브 시스템",
        "description": "일수별 진행 상황 저장과 게임 오버 처리를 위한 상태 관리 시스템 구현",
        "details": "SaveManager.cs로 플레이어 상태(HP, 허기, 인벤토리), 현재 일수, 맵 상태(루팅된 오브젝트) 저장/로드. 생존/사망 결과에 따른 다음날 진행 또는 게임 오버 처리. JSON 기반 세이브 파일 시스템과 암호화. 게임 오버 시 통계 화면(생존 일수, 수집 아이템 수 등) 표시.",
        "testStrategy": "세이브/로드 기능 테스트, 게임 오버 조건 테스트, 다음날 전환 테스트, 데이터 무결성 테스트",
        "priority": "low",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "UI/UX 최적화 및 피드백 시스템",
        "description": "PRD 명세에 따른 직관적인 UI와 피드백 시스템 구현으로 사용자 경험 개선",
        "details": "HUD에 허기/HP 바, 인벤토리, 시간/웨이브 카운터 통합. 허기 임계치별 바 색상 변화(녹색→노랑→빨강)와 진동/사운드 경고. 상호작용 E키 아이콘을 오브젝트 위에 표시하고 제작 진행바 UI 구현. 아이템 획득 시 파티클 효과와 사운드 피드백. 첫 2분 내 플레이어가 해야 할 일을 명확히 안내하는 튜토리얼 시스템.",
        "testStrategy": "UI 요소 배치 및 크기 테스트, 색상 변화 및 알림 테스트, 상호작용 힌트 표시 테스트, 피드백 효과 테스트, 튜토리얼 플로우 테스트",
        "priority": "medium",
        "dependencies": [
          2,
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-12T11:48:51.100Z",
      "updated": "2025-08-12T11:48:51.100Z",
      "description": "Tasks for master context"
    }
  }
}